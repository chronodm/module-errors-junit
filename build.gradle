plugins {
  id 'java'
  id 'java-library'
}

sourceCompatibility = 10
targetCompatibility = 10

test {
  useJUnitPlatform()
}

ext {
  moduleName = 'org.dmoles'
  moduleVersion = '0.1'
  junitVersion = '5.2.0'
}

dependencies {
  // ------------------------------------------------------------
  // Testing

  testCompile "org.junit.jupiter:junit-jupiter-api:$junitVersion"
  testCompile "org.junit.jupiter:junit-jupiter-params:$junitVersion"
  testRuntime "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
  testCompile "org.junit.vintage:junit-vintage-engine:$junitVersion"
}

repositories {
  jcenter()
}

sourceSets {
  main.output.resourcesDir = main.java.outputDir
}

compileJava {
  doFirst {
    options.compilerArgs = [
      '--module-path', classpath.asPath,
    ]
    classpath = files()
  }
}

compileTestJava {
  inputs.property("moduleName", moduleName)
  doFirst {
    options.compilerArgs = [
      '--module-path', classpath.asPath,
      '--add-modules', 'org.junit.jupiter.api',
      '--add-reads', "$moduleName=org.junit.jupiter.api",
      '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
    ]
    classpath = files()
  }
}

test {
  inputs.property("moduleName", moduleName)
  doFirst {
    jvmArgs = [
      '--module-path', classpath.asPath,
      '--add-modules', 'ALL-MODULE-PATH',
      '--add-opens', "$moduleName/org.dmoles=org.junit.platform.commons",
      '--add-reads', "$moduleName=org.junit.jupiter.api",
      '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
    ]
    classpath = files()
  }
}
